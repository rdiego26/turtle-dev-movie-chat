[{"/Users/ramos/Projects/turtle-dev-movie-chat/src/index.tsx":"1","/Users/ramos/Projects/turtle-dev-movie-chat/src/utils/database.ts":"2","/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Router.tsx":"3","/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Comment.tsx":"4","/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Table.tsx":"5","/Users/ramos/Projects/turtle-dev-movie-chat/src/hooks/comment.ts":"6","/Users/ramos/Projects/turtle-dev-movie-chat/src/hooks/movies.ts":"7","/Users/ramos/Projects/turtle-dev-movie-chat/src/hooks/movie.ts":"8","/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Loading.tsx":"9"},{"size":297,"mtime":1606954470000,"results":"10","hashOfConfig":"11"},{"size":1656,"mtime":1607217129914,"results":"12","hashOfConfig":"11"},{"size":402,"mtime":1606952562000,"results":"13","hashOfConfig":"11"},{"size":981,"mtime":1607218091770,"results":"14","hashOfConfig":"11"},{"size":943,"mtime":1606952992000,"results":"15","hashOfConfig":"11"},{"size":941,"mtime":1607219180338,"results":"16","hashOfConfig":"11"},{"size":375,"mtime":1606951266000,"results":"17","hashOfConfig":"11"},{"size":466,"mtime":1606952800000,"results":"18","hashOfConfig":"11"},{"size":113,"mtime":1606949996000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1917l74",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/ramos/Projects/turtle-dev-movie-chat/src/index.tsx",[],["41","42"],"/Users/ramos/Projects/turtle-dev-movie-chat/src/utils/database.ts",["43"],"import 'firebase/database'\nimport firebase from 'firebase/app'\n\nimport mock from '../mock.json'\nimport CommentType from '../types/comment'\nimport MovieType from '../types/movie'\n\nexport const createComment = async (content: string, movieId: number): Promise<CommentType | any> => {\n  const newMovie = { content, createdAt: Date.now() }\n  const response = await fetch(`${process?.env?.REACT_APP_FIREBASE_DATABASE}/comments/${movieId}.json`, {\n    method: 'post',\n    body: JSON.stringify(newMovie)\n  })\n  await response.json()\n  return newMovie\n}\n\nexport const getComments = async (movieId: number): Promise<CommentType[]> => {\n  const response = await fetch(`${process?.env?.REACT_APP_FIREBASE_DATABASE}/comments/${movieId}.json`)\n  return await Object?.values(await response.json() || {})?.sort((a: any, b: any) => a?.createdAt - b?.createdAt) as CommentType[]\n}\n\nexport const getMovies = async (): Promise<MovieType[]> => {\n  return Promise.resolve(mock)\n}\n\nexport const getMovie = async (movieId: number): Promise<MovieType> => {\n  return Promise.resolve(mock[movieId])\n}\n\nexport const initialize = () => {\n  if (firebase?.apps?.length === 0) {\n    firebase?.initializeApp({\n      apiKey: process?.env?.REACT_APP_FIREBASE_KEY,\n      authDomain: process?.env?.REACT_APP_FIREBASE_DOMAIN,\n      databaseURL: process?.env?.REACT_APP_FIREBASE_DATABASE,\n      projectId: process?.env?.REACT_APP_FIREBASE_PROJECT_ID,\n      storageBucket: process?.env?.REACT_APP_FIREBASE_STORAGE_BUCKET,\n      messagingSenderId: process?.env?.REACT_APP_FIREBASE_SENDER_ID,\n    })\n  }\n}\n\nexport default {\n  createComment,\n  getComments,\n  getMovies,\n  getMovie,\n  initialize,\n}\n","/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Router.tsx",[],"/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Comment.tsx",[],"/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Table.tsx",[],"/Users/ramos/Projects/turtle-dev-movie-chat/src/hooks/comment.ts",[],"/Users/ramos/Projects/turtle-dev-movie-chat/src/hooks/movies.ts",[],"/Users/ramos/Projects/turtle-dev-movie-chat/src/hooks/movie.ts",[],"/Users/ramos/Projects/turtle-dev-movie-chat/src/components/Loading.tsx",[],["44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":44,"column":1,"nodeType":"52","endLine":50,"endColumn":2},{"ruleId":"46","replacedBy":"53"},{"ruleId":"48","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["55"],["56"],"no-global-assign","no-unsafe-negation"]